min.freq = 5,  max.words = 15, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 2,  max.words = 15, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 2,  max.words = 35, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 10,  max.words = 35, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 5,  max.words = 50, colorPalette = "BuGn")
text
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 5,  max.words = 50, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 50, colorPalette = "BuGn")
warnings()
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 50, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 20, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 2, colorPalette = "BuGn")
fixedtext
hist(fixedtext)
plot(pkdata)
df = data.frame(happy = pkdata$base_happiness , weight = pkdata$weight_kg )
rcorr(df, type="spearman")
## statistics in R ----
library(Hmisc)
install.packages("Hmisc")
## statistics in R ----
library(Hmisc)
df = data.frame(happy = pkdata$base_happiness , weight = pkdata$weight_kg )
rcorr(df, type="spearman")
rcorr(df, type="spearman")
df
rcorr(as.matrix(df), type="spearman")
rcorr(as.matrix(df), type="pearson")
test<- rcorr(as.matrix(df), type="spearman")
test
help("rcorr")
test<- rcorr(pkdata$weight_kg, pkdata$base_happiness, type="spearman")
test
cor(df)
help("cor")
summary(pkdata)
summary(pkdata)
pkdata[2:13]<- NULL
summary(pkdata)
pkdata <- read.csv("pokemon.csv", header =T)
pkdata[2:17]<- NULL
summary(pkdata)
pkdata <- read.csv("pokemon.csv", header =T)
summary(pkdata)
pkdata[2:19]<- NULL
summary(pkdata)
pkdata["japanese_name"]<- NULL
summary(pkdata)
summary(fixedtext)
summary(as.data.frame(fixedtext))
cor.test( ~ happy + weight,
data=df,
method = "spearman",
continuity = FALSE,
conf.level = 0.95)
cor.test( ~ happy + weight,
data=df,
method = "spearman",
continuity = TRUE,
conf.level = 0.95)
cor.test( ~ happy + weight,
data=df,
method = "pearson",
continuity = TRUE,
conf.level = 0.95)
1:10
y^2
y <- 1:10
y^2
sum(y)
#derivatives
install.packages("Deriv")
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
library(Deriv)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
Deriv(g)
g <- function(x) x^5
Deriv(g)
gdx <- Deriv(g)
gdx(3)
gdx(2)
plot(squarePlusOne, 1:50)
plot(squarePlusOne(1:50), 1:50)
squarePlusOne <- function(x){
return(x^2 +1)
}
squarePlusOne(4)
plot(squarePlusOne(1:50), 1:50)
plot( 1:50,squarePlusOne(1:50))
plot( -50:50,squarePlusOne(-50:50))
library(ggplot2)
ggplot(-50:50, squarePlusOne(-50:50)) + geom_line()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line() + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =5) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =3) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x")
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x", title= "Graph")
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness)) + geom_boxplot()
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness, pkdata$generation)) + geom_boxplot()
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness, color=pkdata$generation)) + geom_boxplot()
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg)) + geom_boxplot()
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg))
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg)) + geom_point()
unique(pkdata$base_happiness)
ggplot(pkdata, aes( unique(pkdata$base_happiness), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness, pkdata$weight_kg), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg), group = unique(pkdata$base_happiness)) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg)) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg)) + geom_point(unique(pkdata$base_happiness))
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot(unique(pkdata$base_happiness))
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot(aes(unique(pkdata$base_happiness)))
matX %*% (1,2,3)
matX %*% c(1,2,3)
# Matrices and Vectors in R ----
x <- c(1,2,3,4,5,6,7,8,9)
x*x # element wise multiplying of a vector
sum(x*x) # dot product
x%*%x # dot product
# transform a vector into a matrix
matX <- matrix(x , 3,3)
matX %*% c(1,2,3)
solve(matX)
matX
matx<- matrix(c(1,2,1, 0,1,0, 0,0,1), 3)
solve(matX)
matx<- matrix(c(1,2,0, 0,1,0, 0,0,1), 3)
solve(matX)
matX<- matrix(c(1,2,0, 0,1,0, 0,0,1), 3)
matX<- matrix(c(1,2,1, 0,1,0, 0,0,1), 3)
solve(matX)
matX %*% invmatX
invmatX <- solve(matX)
matX %*% invmatX
solve(matX, c(5,4,3))
pkdata <- read.csv("pokemon.csv", header =T)
head(pkdata) # look at the data
nrow(pkdata)
ncol(pkdata)
summary(pkdata)
pkdata[2:19]<- NULL
pkdata["japanese_name"]<- NULL
summary(pddata)
summary(pkdata)
plot(pkdata$base_happiness, pkdata$weight_kg )
plot(pkdata$percentage_male,pkdata$attack)
plot(pkdata$percentage_male,pkdata$weight_kg)
p = (ggplot(pkdata, aes(pkdata$is_legendary, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_xkcd())
library(ggplot2)
p = (ggplot(pkdata, aes(pkdata$is_legendary, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_xkcd())
p = (ggplot(pkdata, aes(pkdata$is_legendary, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_classic())
p
if (pkdata$is_legendary == 1){pkdata$is_legendaryWord <- "yes"}
if (pkdata$is_legendary == 0){pkdata$is_legendaryWord <- "no"}
lapply(pkdata$is_legendary, function(x){
if (x == 1){y <- "yes"}
if (x == 0){y <- "no"}
return(y)
})
converted <- lapply(pkdata$is_legendary, function(x){
if (x == 1){y <- "yes"}
if (x == 0){y <- "no"}
return(y)
})
pkdataNew <- data.frame(pkdata, is_legendWord = unlist(converted))
pkdataNew
pkdataNew$is_legendaryWord
unique(pkdataNew$is_legendaryWord)
unique(pkdataNew$is_legendWord)
p = (ggplot(pkdata, aes(pkdata$is_legendWord, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_classic())
p = (ggplot(pkdataNew, aes(pkdata$is_legendWord, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_classic())
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) +
theme_classic())
p
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Total Base statistics")
theme_classic())
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Total Base statistics")
theme_classic())
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Total Base statistics")+
theme_classic())
p
plot(pkdata$is_legendary, pkdata$base_total)
p1<- (ggplot(pkdata, aes(pkdataNew$is_legendaryWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_point()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendaryWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_point()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_point()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter()
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter()+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
scale_color_brewer(palette = "Set1")  +
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
scale_color_brewer(aes(palette = "Set1") ) +
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
scale_colour_gradient(low = "green", high = "red")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(aes(color =pkdataNew$generation), .05)+
scale_colour_gradient(low = "green", high = "red")+
theme_bw())
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(aes(color =pkdataNew$generation), .05)+
scale_colour_gradient(low = "green", high = "red")+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack", color ="Generation")+ geom_jitter(.05)+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(x=pkdataNew$is_legendWord, y=pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack", color ="Generation")+ geom_jitter(.05)+
theme_bw())
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw())
p1
# press cmd + enter to run a line (or press the run button in the top right of this editing panel)
x <- 1 + 1 # assignment
x
x %% 2  # mod
seq(1,10,2)
y <- 1:10
y^2
sum(y)
seq(1,10,2)
sum(y)
# Matrices and Vectors in R ----
x <- c(1,2,3,4,5,6,7,8,9)
x
x*x # element wise multiplying of a vector
# transform a vector into a matrix
matX <- matrix(x , 3,3)
matX
t(matX) # transpose
matX * t(matX)  # element wise matrix multiplication
matX %*% t(matX) # usually matrix mutliplication
matX<- matrix(c(1,2,1, 0,1,0, 0,0,1), 3)
invmatX <- solve(matX) # get the inverse (if the matrix is singualr it will throw an error)
invmatX
matX %*% invmatX
solve(matX, c(5,4,3)) # solve for an x vector by passing solve(A, b)
squarePlusOne
squarePlusOne
squarePlusOne(4)
#using a function from another R file  (that you made)
source('externalFunction.R')  # you can include the path to the file if you need to
function1(1,2)
## Solving ODE's in R ----
parameters <- c(a = -8/3,b = -10,c = 28)
state <- c(X = 1,Y = 1,Z = 1)
state
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z
# return the rate of change
list(c(dX, dY, dZ))
}) # end with(as.list ...
}
times <- seq(0, 100, by = 0.01)
library(deSolve)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
library(Deriv)
g <- function(x) x^5
gdx <- Deriv(g)
gdx(2)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
pkdata <- read.csv("pokemon.csv", header =T)
head(pkdata) # look at the data (this is the first six entries of the data frame )
nrow(pkdata)
ncol(pkdata)
pkdata[2:19]<- NULL
pkdata["japanese_name"]<- NULL
summary(pkdata)
#"base" plot
plot(pkdata$percentage_male,pkdata$attack)
plot(pkdata$base_happiness, pkdata$weight_kg )
cor.test( ~ happy + weight,
data=df,
method = "pearson",
continuity = TRUE,
conf.level = 0.95)
library(ggplot2)
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x", title= "Graph")
p = (ggplot(pkdata, aes(pkdata$is_legendary, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_classic())
p
converted <- lapply(pkdata$is_legendary, function(x){
if (x == 1){y <- "yes"}
if (x == 0){y <- "no"}
return(y)
})
pkdataNew <- data.frame(pkdata, is_legendWord = unlist(converted))
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Total Base Statistics")+
theme_classic())
p
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw(siz=20))
p1
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw(size=20))
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw(size=20))
p1
# press cmd + enter to run a line (or press the run button in the top right of this editing panel)
x <- 1 + 1 # assignment
x
x %% 2  # mod
y <- 1:10
y^2
sum(y)
seq(1,10,2)
getwd()
setwd('../Desktop/RtutorialCMS')
# Matrices and Vectors in R ----
x <- c(1,2,3,4,5,6,7,8,9)
x*x # element wise multiplying of a vector
sum(x*x) # dot product
x%*%x # dot product
# transform a vector into a matrix
matX <- matrix(x , 3,3)
matX
t(matX) # transpose
matX * t(matX)  # element wise matrix multiplication
matX %*% t(matX) # usually matrix mutliplication
matX<- matrix(c(1,2,1, 0,1,0, 0,0,1), 3)
invmatX <- solve(matX) # get the inverse (if the matrix is singualr it will throw an error)
matX %*% invmatX
solve(matX, c(5,4,3)) # solve for an x vector by passing solve(A, b)
squarePlusOne <- function(x){
return(x^2 +1)
}
squarePlusOne(4)
plot( -50:50,squarePlusOne(-50:50))
#using a function from another R file  (that you made)
source('externalFunction.R')  # you can include the path to the file if you need to
function1(1,2)
## Solving ODE's in R ----
parameters <- c(a = -8/3,b = -10,c = 28)
state <- c(X = 1,Y = 1,Z = 1)
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z
# return the rate of change
list(c(dX, dY, dZ))
}) # end with(as.list ...
}
times <- seq(0, 100, by = 0.01)
install.packages("deSolve") #this only needs to be run once (and you need an internet connection)
library(deSolve)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
par(oma = c(0, 0, 3, 0))
plot(out, xlab = "time", ylab = "-")
plot(out[, "X"], out[, "Z"], pch = ".")
mtext(outer = TRUE, side = 3, "Lorenz model", cex = 1.5)
#derivatives
install.packages("Deriv")
library(Deriv)
g <- function(x) x^5
gdx <- Deriv(g)
gdx(2)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
pkdata <- read.csv("pokemon.csv", header =T)
head(pkdata) # look at the data (this is the first six entries of the data frame )
nrow(pkdata)
ncol(pkdata)
summary(pkdata)
pkdata[2:19]<- NULL
pkdata["japanese_name"]<- NULL
summary(pkdata)
# if we want to look at just one column from a data frame
pkdata$name
# sorting data according to a column in R
pkdata.sorted <- pkdata[order(pkdata$pokedex_number),]
#string manipulations
install.packages("gdata")
library(gdata)
text <- gsub("\\[|\\]|'|'", "", pkdata$abilities)  # delete weird character formatting
fixedtext<- trim(unlist(lapply(text, strsplit, split=","))) # combine strings into one array and "trim" spaces from front and back
summary(as.data.frame(fixedtext))
unique(fixedtext)
#"base" plot
plot(pkdata$percentage_male,pkdata$attack)
plot(pkdata$percentage_male,pkdata$weight_kg)
plot(pkdata$base_happiness, pkdata$weight_kg )
df = data.frame(happy = pkdata$base_happiness , weight = pkdata$weight_kg )
cor.test( ~ happy + weight,
data=df,
method = "pearson",
continuity = TRUE,
conf.level = 0.95)
## Better graphing in R ----
install.packages("ggplot2")
library(ggplot2)
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x", title= "Graph")
p = (ggplot(pkdata, aes(pkdata$is_legendary, pkdata$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdata$type1) +
theme_classic())
p
converted <- lapply(pkdata$is_legendary, function(x){
if (x == 1){y <- "yes"}
if (x == 0){y <- "no"}
return(y)
})
pkdataNew <- data.frame(pkdata, is_legendWord = unlist(converted))
p = (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$base_total)) + geom_boxplot() +
labs(title='Sum of Total Stats Separated by\n Type and Legendary Status') +
facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Total Base Statistics")+
theme_classic())
p
p1<- (ggplot(pkdataNew, aes(pkdataNew$is_legendWord, pkdataNew$attack, color=pkdataNew$generation)) +
geom_boxplot()  +facet_wrap(~ pkdataNew$type1) + labs(x="Is Legendary", y="Base Attack")+ geom_jitter(.05)+
theme_bw(size=20))
p1
