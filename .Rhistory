## Solving ODE's in R ----
parameters <- c(a = -8/3,b = -10,c = 28)
state <- c(X = 1,Y = 1,Z = 1)
parameters
state
pkdata <- read.csv("pokemon.csv", header =T)
head(pkdata) # look at the data
nrow(pkdata)
ncol(pkdata)
plot(pkdata$percentage_male,pkdata$weight_kg)
plot(pkdata$base_happiness, pkdata$weight_kg )
pkdata.sorted <- pkdata[order(pkdata$pokedex_number),]
unique( sapply(unlist(pkdata$abilities), paste) )
gsub(c("[", "]", "'", "'"), "", pkdata$abilities)
lapply(gsub,c("[", "]", "'", "'"), "", pkdata$abilities )
lapply(gsub,list("[", "]", "'", "'"), "", pkdata$abilities )
sapply(gsub, list("[", "]", "'", "'"), "", pkdata$abilities )
lapply(list("[", "]", "'", "'"), function(return(1)))
lapply(list("[", "]", "'", "'"), function{return(1)})
lapply(list("[", "]", "'", "'"), function(x){ return(1)})
gsub("["| "]"|"'"|"'"), "", pkdata$abilities)
gsub("["| "]"|"'"|"'", "", pkdata$abilities)
gsub("[|]|'|'", "", pkdata$abilities)
gsub("[|]|'|'|[|]", "", pkdata$abilities)
sapply((gsub("[|]|'|'|[|]", "", pkdata$abilities), paste)
sapply(gsub("[|]|'|'|[|]", "", pkdata$abilities), paste)
gsub("[|]|'|'|[|]", "", strsplit(pkdata$abilities, ","))
gsub("[|]|'|'|[|]", "", strsplit(",",pkdata$abilities))
help("strsplit")
gsub("[|]|'|'|[|]", "", strsplit(pkdata$abilities))
gsub("[|]|'|'|[|]", "", strsplit(",",pkdata$abilities))
lapply(pkdata$abilities, paste)
unlist(lapply(pkdata$abilities, paste))
dapply(pkdata$abilities, paste)
sapply(pkdata$abilities, paste)
gsub("[|]|'|'|[|]", "", pkdata$abilities)
sapply(text, strsplit, split=",")
sapply(text, strsplit, split=",")
text[1]
text
text <- gsub("[|]|'|'|[|]", "", pkdata$abilities)
text
text[1]
text <- gsub("[|]|'|'|[|]", "", pkdata$abilities)
sapply(text, strsplit, split=",")
unlist(sapply(text, strsplit, split=","))
unlist(mapply(text, strsplit, split=","))
unlist(lapply(text, strsplit, split=","))
gsub("[|]|'|'|[|]| ", "",unlist(lapply(text, strsplit, split=",")))
gsub("[|]|'|'|[|]| ", "",unlist(lapply(text, strsplit, split=",", fixed=T)))
gsub("[|]|'|'|[|]| ", "",unlist(lapply(text, strsplit, split=",", fixed=F)))
gsub("[|]|'|'|[|]| ", "",unlist(lapply(text, strsplit, split=",",)), fixed = T)
gsub("[|]|'|'|[|]| ", "",unlist(lapply(text, strsplit, split=",",)), fixed = F)
gsub("[", "",unlist(lapply(text, strsplit, split=",",)))
gsub('[', "",unlist(lapply(text, strsplit, split=",",)))
gsub('\\[', "",unlist(lapply(text, strsplit, split=",",)))
gsub('\\[|\\]', "",unlist(lapply(text, strsplit, split=",",)))
trimgsub('\\[|\\]', "",unlist(lapply(text, strsplit, split=",",))))
trim(gsub('\\[|\\]', "",unlist(lapply(text, strsplit, split=",",))))
install.packages("gdata")
library(gdata)
trim(gsub('\\[|\\]', "",unlist(lapply(text, strsplit, split=",",))))
fixedtext<- trim(gsub('\\[|\\]', "",unlist(lapply(text, strsplit, split=",",))))
text <- gsub("\\[|\\]|'|'", "", pkdata$abilities)
fixedtext<- trim(unlist(lapply(text, strsplit, split=",",)))
fixedtext
fixedtext<- trim(unlist(lapply(text, strsplit, split=",")))
fixedtext
unique(fixedtext)
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
source('http://www.sthda.com/upload/rquery_wordcloud.r')
str <- sapply(dat$How.did.you.hear.about.us. , paste , sep ='\n')
str
res <- rquery.wordcloud(str, type= "text", lang ="english",
min.freq = 1,  max.words = 25, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 1,  max.words = 25, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 5,  max.words = 25, colorPalette = "BuGn")
warnings()
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 5,  max.words = 15, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 2,  max.words = 15, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 2,  max.words = 35, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 10,  max.words = 35, colorPalette = "BuGn")
res <- rquery.wordcloud(text, type= "text", lang ="english",
min.freq = 5,  max.words = 50, colorPalette = "BuGn")
text
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 5,  max.words = 50, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 50, colorPalette = "BuGn")
warnings()
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 50, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 20, colorPalette = "BuGn")
res <- rquery.wordcloud(fixedtext, type= "text", lang ="english",
min.freq = 1,  max.words = 2, colorPalette = "BuGn")
fixedtext
hist(fixedtext)
plot(pkdata)
df = data.frame(happy = pkdata$base_happiness , weight = pkdata$weight_kg )
rcorr(df, type="spearman")
## statistics in R ----
library(Hmisc)
install.packages("Hmisc")
## statistics in R ----
library(Hmisc)
df = data.frame(happy = pkdata$base_happiness , weight = pkdata$weight_kg )
rcorr(df, type="spearman")
rcorr(df, type="spearman")
df
rcorr(as.matrix(df), type="spearman")
rcorr(as.matrix(df), type="pearson")
test<- rcorr(as.matrix(df), type="spearman")
test
help("rcorr")
test<- rcorr(pkdata$weight_kg, pkdata$base_happiness, type="spearman")
test
cor(df)
help("cor")
summary(pkdata)
summary(pkdata)
pkdata[2:13]<- NULL
summary(pkdata)
pkdata <- read.csv("pokemon.csv", header =T)
pkdata[2:17]<- NULL
summary(pkdata)
pkdata <- read.csv("pokemon.csv", header =T)
summary(pkdata)
pkdata[2:19]<- NULL
summary(pkdata)
pkdata["japanese_name"]<- NULL
summary(pkdata)
summary(fixedtext)
summary(as.data.frame(fixedtext))
cor.test( ~ happy + weight,
data=df,
method = "spearman",
continuity = FALSE,
conf.level = 0.95)
cor.test( ~ happy + weight,
data=df,
method = "spearman",
continuity = TRUE,
conf.level = 0.95)
cor.test( ~ happy + weight,
data=df,
method = "pearson",
continuity = TRUE,
conf.level = 0.95)
1:10
y^2
y <- 1:10
y^2
sum(y)
#derivatives
install.packages("Deriv")
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
library(Deriv)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
Deriv(g)
g <- function(x) x^5
Deriv(g)
gdx <- Deriv(g)
gdx(3)
gdx(2)
plot(squarePlusOne, 1:50)
plot(squarePlusOne(1:50), 1:50)
squarePlusOne <- function(x){
return(x^2 +1)
}
squarePlusOne(4)
plot(squarePlusOne(1:50), 1:50)
plot( 1:50,squarePlusOne(1:50))
plot( -50:50,squarePlusOne(-50:50))
library(ggplot2)
ggplot(-50:50, squarePlusOne(-50:50)) + geom_line()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line() + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =5) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =3) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x")
ggplot(, aes(-50:50, squarePlusOne(-50:50))) + geom_line(size =2) + theme_bw()+ labs(y="x^2 +1", x="x", title= "Graph")
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness)) + geom_boxplot()
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness, pkdata$generation)) + geom_boxplot()
ggplot(pkdata, aes(pkdata$weight_kg, pkdata$base_happiness, color=pkdata$generation)) + geom_boxplot()
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg)) + geom_boxplot()
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg))
ggplot(pkdata, aes( pkdata$base_happiness,pkdata$weight_kg)) + geom_point()
unique(pkdata$base_happiness)
ggplot(pkdata, aes( unique(pkdata$base_happiness), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness, pkdata$weight_kg), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg), group = unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg), group = unique(pkdata$base_happiness)) + geom_point()
ggplot(pkdata, aes( unique(pkdata$base_happiness), pkdata$weight_kg)) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg)) + geom_point(unique(pkdata$base_happiness))
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=unique(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot()
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot(unique(pkdata$base_happiness))
ggplot(pkdata, aes(pkdata$base_happiness, pkdata$weight_kg, color=(pkdata$base_happiness))) + geom_point() + geom_boxplot(aes(unique(pkdata$base_happiness)))
